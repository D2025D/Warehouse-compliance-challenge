<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Warehouse Compliance Challenge (v6.5)</title>
  <style>
    :root{
      --bg:#0b1220; --card:#121a2a; --accent:#3fb6ff; --accent-2:#6ee7ff;
      --text:#e8f1ff; --muted:#9ab0d1; --success:#22c55e; --danger:#ef4444;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;font-family:Inter,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
      background: radial-gradient(1000px 600px at 20% -10%, #10203a 0%, #0b1220 60%),
                  radial-gradient(800px 600px at 120% 10%, #0e1d36 0%, #0b1220 60%),
                  #0b1220;
      color:var(--text);display:flex;align-items:center;justify-content:center;padding:24px;
    }
    .app{width:min(1100px,100%);background:linear-gradient(180deg,rgba(255,255,255,.04),rgba(255,255,255,.02));border:1px solid rgba(255,255,255,.08);border-radius:20px;box-shadow:0 10px 40px rgba(0,0,0,.5), inset 0 1px 0 rgba(255,255,255,.05);overflow:hidden;position:relative}
    header{display:flex;gap:16px;align-items:center;justify-content:space-between;padding:20px 24px;background:linear-gradient(90deg,rgba(63,182,255,.18),rgba(63,182,255,.02));border-bottom:1px solid rgba(255,255,255,.08)}
    .brand{display:flex;align-items:center;gap:12px}
    .logo{width:42px;height:42px;border-radius:12px;background:conic-gradient(from 210deg,var(--accent),var(--accent-2),#7cf1c7)}
    h1{font-size:20px;margin:0;letter-spacing:.3px}
    .sub{font-size:12px;color:var(--muted);margin-top:2px}
    .controls{display:flex;gap:10px;align-items:center}
    button{background:linear-gradient(180deg,var(--accent),#2aa3ee);color:#001327;border:none;border-radius:12px;padding:10px 14px;font-weight:700;letter-spacing:.3px;cursor:pointer;box-shadow:0 8px 24px rgba(63,182,255,.35);transition:all .15s ease}
    button.secondary{background:transparent;color:var(--text);border:1px solid rgba(255,255,255,.18);box-shadow:none}
    button:disabled{opacity:.5;cursor:not-allowed}
    button:hover{transform:translateY(-1px)}
    main{display:grid;grid-template-columns:340px 1fr;min-height:520px}
    aside{border-right:1px solid rgba(255,255,255,.08);padding:18px;display:flex;flex-direction:column;gap:12px;background:linear-gradient(180deg,rgba(63,182,255,.08),transparent 30%)}
    .level{background:rgba(255,255,255,.03);border:1px solid rgba(255,255,255,.08);border-radius:14px;padding:12px;display:flex;gap:12px;align-items:center;cursor:pointer;transition:.15s ease}
    .level:hover{background:rgba(255,255,255,.06)}
    .badge{font-size:11px;padding:3px 8px;border-radius:999px;border:1px solid rgba(255,255,255,.18);color:var(--muted)}
    .level .title{font-weight:700}
    .level .meta{font-size:12px;color:var(--muted)}
    .level.active{outline:2px solid var(--accent)}
    .content{padding:22px 22px 76px 22px;display:flex;flex-direction:column;gap:16px}
    .question-card{background:rgba(8,12,22,.8);border:1px solid rgba(255,255,255,.08);border-radius:16px;padding:18px}
    .q-head{display:flex;justify-content:space-between;align-items:center;margin-bottom:10px}
    .q-tag{font-size:12px;color:var(--muted)}
    .q-text{font-size:20px;line-height:1.35;margin:8px 0 10px}
    .options{display:grid;grid-template-columns:1fr;gap:12px;margin-top:8px}
    .opt{display:block;width:100%;border:2px solid var(--accent);border-radius:12px;padding:12px;margin:6px 0;cursor:pointer;background:#1b2738;color:var(--text);font-weight:600;text-align:left;transition:.2s}
    .opt:hover{background:var(--accent);color:#001327}
    .opt.correct{border-color:var(--success);background:rgba(34,197,94,.15)}
    .opt.wrong{border-color:var(--danger);background:rgba(239,68,68,.15)}
    .explain{margin-top:10px;color:var(--muted);font-size:14px;border-left:3px solid rgba(255,255,255,.15);padding-left:10px}
    .status{display:flex;gap:14px;align-items:center;margin-top:8px;font-size:14px;color:var(--muted)}
    .pill{border:1px solid rgba(255,255,255,.18);padding:6px 10px;border-radius:999px}
    .score{font-weight:800;color:var(--accent)}
    .progress{height:10px;background:rgba(255,255,255,.06);border-radius:999px;overflow:hidden}
    .progress>div{height:100%;width:0;background:linear-gradient(90deg,var(--accent),var(--accent-2));transition:width .3s ease}
    .toast{position:fixed;bottom:90px;left:50%;transform:translateX(-50%);background:#0e1626;border:1px solid rgba(255,255,255,.1);padding:10px 14px;border-radius:10px;color:var(--text);opacity:0;pointer-events:none;transition:.2s;z-index:5}
    .toast.show{opacity:1}
    .footer{display:flex;justify-content:space-between;align-items:center;margin-top:8px;color:var(--muted);font-size:12px}
    .small{font-size:12px;color:var(--muted)}
    .kbd{border:1px solid rgba(255,255,255,.18);padding:2px 6px;border-radius:6px;font-size:11px}
    .hidden{display:none!important}

    /* Modals */
    .modal{position:fixed;inset:0;background:rgba(0,0,0,.55);display:none;align-items:center;justify-content:center;padding:24px;z-index:10}
    .modal.show{display:flex}
    .card{width:min(980px,100%);background:#0e1626;border:1px solid rgba(255,255,255,.12);border-radius:16px;padding:18px 18px 8px 18px;box-shadow:0 20px 60px rgba(0,0,0,.6)}
    .card h2{margin:4px 0 10px 0}
    .grid{display:grid;grid-template-columns:repeat(3,1fr);gap:12px;margin-bottom:10px}
    .stat{background:rgba(255,255,255,.04);border:1px solid rgba(255,255,255,.08);border-radius:12px;padding:12px}
    .list{max-height:360px;overflow:auto;margin-top:6px;border:1px solid rgba(255,255,255,.08);border-radius:12px}
    .row{padding:10px;border-bottom:1px solid rgba(255,255,255,.06)}
    .row:last-child{border-bottom:none}
    .ok{color:var(--success);font-weight:700}
    .no{color:var(--danger);font-weight:700}
    .actions{display:flex;gap:10px;justify-content:flex-end;margin-top:10px}

    /* Player info form */
    .form-row{display:flex;gap:12px;margin:6px 0;flex-wrap:wrap}
    .input{flex:1;min-width:220px;background:#0b1526;border:1px solid rgba(255,255,255,.15);border-radius:10px;padding:10px 12px;color:var(--text)}
    label.small{display:block;margin-bottom:4px}
    .hint{font-size:12px;color:var(--muted);margin-top:6px}

    /* Bottom Leaderboard bar */
    .lb-bar{position:absolute;left:0;right:0;bottom:0;height:56px;display:flex;align-items:center;justify-content:space-between;padding:10px 16px;background:rgba(15,20,32,.95);border-top:1px solid rgba(255,255,255,.08)}
    .lb-title{font-size:13px;color:var(--muted)}
    .lb-btn{padding:8px 12px;border-radius:10px;border:1px solid rgba(255,255,255,.18);background:transparent;color:var(--text);cursor:pointer}
    .lb-panel{position:fixed;left:0;right:0;bottom:-60vh;height:60vh;background:#0c1424;border-top:1px solid rgba(255,255,255,.2);transition:bottom .25s ease;z-index:8;overflow:auto}
    .lb-panel.show{bottom:0}
    .lb-wrap{padding:14px 18px}
    .site-block{margin-bottom:14px;background:rgba(255,255,255,.04);border:1px solid rgba(255,255,255,.08);border-radius:14px}
    .site-head{padding:10px 14px;border-bottom:1px solid rgba(255,255,255,.08);font-weight:800}
    table{width:100%;border-collapse:collapse}
    th,td{padding:8px 10px;border-bottom:1px solid rgba(255,255,255,.08);text-align:left;font-size:13px;vertical-align:top}
    th{font-size:12px;color:var(--muted);font-weight:600}
    .mini{font-size:12px;color:var(--muted)}

    /* Debug badge */
    .debug{position:fixed;right:8px;bottom:64px;font-size:11px;color:#9ab0d1}
    .debug a{color:#6ee7ff}
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div class="brand">
        <div class="logo"></div>
        <div>
          <h1>Warehouse Compliance Challenge</h1>
          <div class="sub">Master the XSite Audit essentials through quick, practical questions.</div>
        </div>
      </div>
      <div class="controls">
        <button id="btnStart" type="button">Start</button>
        <button class="secondary" id="btnReset" type="button">Reset</button>
        <button class="secondary" id="btnHelp" type="button">Instructions</button>
      </div>
    </header>
    <main>
      <aside id="levels"></aside>
      <section class="content">
        <div class="question-card">
          <div class="q-head">
            <div class="q-tag">Category</div>
            <div class="pill">Question <span id="qIndex">0</span>/<span id="qTotal">0</span></div>
          </div>
          <div class="q-text" id="qText">Press <span class="kbd">Start</span> to begin. Choose a level on the left to jump around.</div>
          <div class="options" id="options"></div>
          <div class="explain hidden" id="explain"></div>
          <div class="status">
            <div class="pill">Score: <span class="score" id="score">0</span></div>
            <div class="pill">Streak: <span id="streak">0</span></div>
            <div class="pill">Best: <span id="best">0</span></div>
          </div>
          <div class="progress"><div id="bar"></div></div>
          <div class="footer">
            <div>Tip: Use <span class="kbd">1-4</span> to answer faster. Review notes appear after each question.</div>
            <div id="footCat" class="small"></div>
          </div>
        </div>
        <div class="small">Built for practice and training purposes. For exact wording, always refer to your official document.</div>
      </section>
    </main>

    <div class="lb-bar">
      <div class="lb-title">Leaderboard is locked â€¢ grouped by site</div>
      <div>
        <button class="lb-btn" id="btnShowLB" type="button">View Leaderboard</button>
        <button class="lb-btn" id="btnExportLB" type="button">Export Leaderboard CSV</button>
      </div>
    </div>
    <div class="lb-panel" id="lbPanel">
      <div class="lb-wrap">
        <div style="display:flex;gap:10px;align-items:center;margin-bottom:8px">
          <div style="font-weight:800">Leaderboard</div>
          <div class="small" id="lbSummary"></div>
          <button class="lb-btn" style="margin-left:auto" id="btnClearLB" type="button">Clear Leaderboard</button>
          <button class="lb-btn" id="btnHideLB" type="button">Close</button>
        </div>
        <div id="lbContainer"></div>
      </div>
    </div>
  </div>

  <div class="toast" id="toast"></div>

  <!-- Player Info Modal (REQUIRED) -->
  <div class="modal" id="playerModal" role="dialog" aria-modal="true" aria-labelledby="playerTitle">
    <form class="card" id="playerForm" novalidate>
      <h2 id="playerTitle">ðŸ‘‹ Before we start</h2>
      <div class="small">Enter your details so they appear on the final results and leaderboard.</div>
      <div class="form-row" style="margin-top:8px">
        <div style="flex:1">
          <label class="small" for="inpName">Your name</label>
          <input id="inpName" class="input" placeholder="e.g., Alex Rivera" autocomplete="name" required />
        </div>
        <div style="flex:1">
          <label class="small" for="inpSite">Site</label>
          <input id="inpSite" class="input" placeholder="e.g., Marietta, GA" required />
        </div>
      </div>
      <div class="hint"><input type="checkbox" id="rememberMe" /> <label for="rememberMe">Remember me on this device</label></div>
      <div class="actions">
        <button type="button" class="secondary" id="btnCancelInfo">Cancel</button>
        <button id="btnBegin" type="submit">Begin</button>
      </div>
    </form>
  </div>

  <!-- Final Summary Modal -->
  <div class="modal" id="finalModal" role="dialog" aria-modal="true" aria-labelledby="summaryTitle">
    <div class="card">
      <h2 id="summaryTitle">âœ… Final Summary</h2>
      <div class="small" id="sumHeader"></div>
      <div class="grid">
        <div class="stat"><div class="small">Total Score</div><div id="sumScore" style="font-size:24px;font-weight:800"></div></div>
        <div class="stat"><div class="small">Correct / Wrong</div><div id="sumCW" style="font-size:24px;font-weight:800"></div></div>
        <div class="stat"><div class="small">Longest Streak</div><div id="sumStreak" style="font-size:24px;font-weight:800"></div></div>
      </div>
      <div class="small" style="margin-top:4px">Per-level stats</div>
      <div class="list" id="sumLevels"></div>
      <div class="small" style="margin-top:8px">Review</div>
      <div class="list" id="sumList"></div>
      <div class="actions">
        <button class="secondary" id="btnExport" type="button">Export CSV</button>
        <button id="btnRestart" type="button">Restart</button>
      </div>
    </div>
  </div>

  <div class="debug" id="dbg"></div>

  <script>
  (function(){
    // ---------- Helpers & Debug ----------
    const dbg = document.getElementById('dbg');
    function log(msg){ console.log('[WCC]', msg); if(dbg){ dbg.innerHTML = 'âœ“ ' + msg + ' â€¢ <a href="#" id="openAlt">Open modal</a>'; setTimeout(()=>{ const a=document.getElementById('openAlt'); if(a) a.onclick=(e)=>{ e.preventDefault(); openModal(); }; },0); } }
    const $ = (id)=>document.getElementById(id);
    function toast(msg){ const t=$('toast'); t.textContent=msg; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'), 900); }
    function escapeHtml(s){ return String(s).replace(/[&<>]/g, c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c])); }

    // ---------- Data ----------
    const LEVELS = [
      { id:"hse", title:"HSE & PPE", items:[
        { q:"How often must a corporate Health & Safety (H&S) audit be conducted?", options:["Every 6 months","Every 12 months","Every 18 months","Only after incidents"], correct:1, cat:"HSE 1.1", explain:"Audits shall be conducted at least once every 12 months; findings addressed within 90 days. (Ref: HSE 1.1)" },
        { q:"By when must accidents be reported to required parties?", options:["Within 8 hours","Within 24 hours","Within 48 hours","Within 72 hours"], correct:1, cat:"HSE 3.2", explain:"Accidents are documented and reported within 24 hours to specified parties. (Ref: HSE 3.2)" },
        { q:"Required PPE usage is...", options:["Optional for visitors","Only for MHE drivers","Required as determined by the PPE Assessment","Only during peak hours"], correct:2, cat:"HSE 1.3", explain:"All employees and visitors shall wear the PPE as determined in the PPE Assessment. (Ref: HSE 1.3)" },
        { q:"Hazard Identification & PPE assessments should be:", options:["Ad-hoc by any employee","Completed within the last year by qualified personnel","Every 3 years by HR","Only if requested by customer"], correct:1, cat:"HSE 1.2", explain:"Current Hazard ID & PPE assessment completed within the last year by competent individuals. (Ref: HSE 1.2)" }
      ]},
      { id:"process", title:"Process & Audits", items:[
        { q:"How frequently must core process audits be scheduled across the year?", options:["At least one core process per month","Quarterly only","Annually for all processes","Only after deviations"], correct:0, cat:"PO 5.3", explain:"At least one core process is audited each month; all core processes covered over time. (Ref: PO 5.3)" },
        { q:"Work Instructions should include which of the following?", options:["Only title and photos","Seven mandatory elements like objectives, safety, tools, steps & visuals","Only who does the job","Only a flowchart"], correct:1, cat:"PO 5.4", explain:"WIs include mandatory elements (objective, safety, tools, numbered steps, who/what/how, photos/images). (Ref: PO 5.4)" },
        { q:"Deviations found in audits should be...", options:["Ignored if minor","Logged with actions; document updated if improvement; RCA for repeats","Handled verbally only","Sent to customer"], correct:1, cat:"PO 5.2", explain:"Track deviations, update documents if better, perform RCA on repeat issues, manage changes properly. (Ref: PO 5.2)" }
      ]},
      { id:"fiveS", title:"5S & Visuals", items:[
        { q:"What is expected for 5S zones at the site?", options:["Zones optional if clean","Zones posted, roles assigned, audits & cleaning schedules maintained","Only admin areas zoned","No labels needed"], correct:1, cat:"PO 4.2", explain:"Site is divided into 5S zones with responsible persons, item lists, cleaning schedules, audits and labeling. (Ref: PO 4.2)" },
        { q:"Floor markings should:", options:["Match Schenker specs/local laws and be in good condition","Be any color","Only mark walkways","Be removed during peak season"], correct:0, cat:"PO 4.6", explain:"Floor colors align to spec or local law, fit for purpose, visible and maintained. (Ref: PO 4.6)" },
        { q:"Location labels (incl. machine-readable) are required for:", options:["Only high racks","All locations where stock/inventory is stored","Only floor locations","Optional in small sites"], correct:1, cat:"PO 4.5", explain:"All rack/shelf/floor/bin locations used for inventory must be identified; machine-readable where applicable. (Ref: PO 4.5)" }
      ]},
      { id:"ci", title:"CI, KATA & Gemba", items:[
        { q:"How long should Gemba walk findings remain open?", options:["Indefinitely","No more than ~2 months; items scheduled & closed","Only until next audit","Only if safety-related"], correct:1, cat:"PO 6.6", explain:"Evidence items are addressed; none remain open for extended time (exceeding two months). (Ref: PO 6.6)" },
        { q:"What % of management must be trained in CI tools at minimum?", options:["25%","50%","75%","100%"], correct:1, cat:"PO 6.8", explain:"At minimum, 50% of management team trained in CI tools (e.g., SIPOC, Ishikawa, 5 Why, etc.). (Ref: PO 6.8)" },
        { q:"Closed/Completed CI initiatives should be documented as:", options:["Word of mouth","Case studies / POP reports / success stories","Emails only","Not needed"], correct:1, cat:"PO 6.10", explain:"Closed initiatives documented as case studies, success stories, POP reports. (Ref: PO 6.10)" },
        { q:"KATA leadership: whatâ€™s expected?", options:["Only operators trained","Highest management trained; coaches & coachees use boards/logbooks; closed KATAs documented","KATA optional","No data needed"], correct:1, cat:"PO 7.1â€“7.3", explain:"Leaders trained; â‰¥50% management involved in coaching; storyboards/logbooks used; coachees present facts & results. (Ref: PO 7.1â€“7.3)" }
      ]},
      { id:"comm", title:"Comms Corner & KPIs", items:[
        { q:"Mandatory elements in the communication corner include:", options:["Only HR policies","Safety info, 5S org/layout/score, XSITE big picture/org chart/targets/status","Only last audit","Holiday calendar only"], correct:1, cat:"PO 10.1 & 10.3", explain:"Corner includes Safety & 5S content plus XSITE Big Picture, org chart, targets and (optional) status/award. (Ref: PO 10.1, PO 10.3)" },
        { q:"Communication corner KPIs should be:", options:["Never updated","Monthly & yearly view, updated regularly; discussed in meetings","Only yearly","Only finance KPIs"], correct:1, cat:"PO 10.2", explain:"Boards updated regularly, include productivity, quality, safety with monthly & yearly perspective; discussed with teams. (Ref: PO 10.2)" },
        { q:"Idea management at the communication corner should:", options:["Be hidden","Provide a place for ideas with follow-up visibility","Be email-only","Be for managers only"], correct:1, cat:"PO 10.4", explain:"Corner provides possibilities to leave ideas and see follow-up. (Ref: PO 10.4)" }
      ]}
    ];

    // ---------- State ----------
    const TOTAL_QUESTIONS = LEVELS.reduce((a,l)=>a+l.items.length,0);
    const BEST_KEY = "wcc_best", INFO_KEY = "wcc_player_info", LB_KEY = "wcc_leaderboard";
    const PASSWORD = "XSite2025!";
    let state = { levelIndex: 0, qIndex: 0, score: 0, streak: 0, answered: false,
                  history: [], longestStreak: 0, player:{name:"", site:""} };

    // Elements
    const levelsEl = $('levels'), qText = $('qText'), optionsEl = $('options'), explainEl = $('explain');
    const qIndexEl = $('qIndex'), qTotalEl = $('qTotal'), scoreEl = $('score'), streakEl = $('streak');
    const bestEl = $('best'), barEl = $('bar'), footCat = $('footCat'), finalModal = $('finalModal');
    const sumScore = $('sumScore'), sumCW = $('sumCW'), sumStreak = $('sumStreak'), sumList = $('sumList'), sumHeader = $('sumHeader'), sumLevelsEl = $('sumLevels');
    const playerModal = $('playerModal'), inpName = $('inpName'), inpSite = $('inpSite'), rememberMe = $('rememberMe');
    const lbPanel = $('lbPanel'), lbSummary = $('lbSummary'), lbContainer = $('lbContainer');

    function getBest(){ return Number(localStorage.getItem(BEST_KEY) || 0); }
    function setBest(v){ localStorage.setItem(BEST_KEY, String(v)); }

    function savePlayer(persist){
      state.player = { name: inpName.value.trim(), site: inpSite.value.trim() };
      if(persist){ localStorage.setItem(INFO_KEY, JSON.stringify(state.player)); }
    }

    // ---------- Levels / Questions ----------
    function buildLevels(){
      levelsEl.innerHTML = "";
      LEVELS.forEach((lv,i)=>{
        const div = document.createElement('div');
        div.className = "level"; div.dataset.index = i;
        div.innerHTML = `
          <div style="width:42px;height:42px;border-radius:12px;background:rgba(255,255,255,.04);display:flex;align-items:center;justify-content:center;font-weight:800;border:1px solid rgba(255,255,255,.08)">${i+1}</div>
          <div><div class="title">${lv.title}</div><div class="meta">${lv.items.length} questions</div></div>
          <div style="margin-left:auto" class="badge">Level</div>`;
        div.addEventListener('click', ()=>{ state.levelIndex=i; state.qIndex=0; updateActiveLevel(); renderQuestion(); });
        levelsEl.appendChild(div);
      });
      updateActiveLevel();
    }
    function updateActiveLevel(){ [...levelsEl.children].forEach((c,idx)=> c.classList.toggle('active', idx===state.levelIndex)); }
    const currentLevel = ()=> LEVELS[state.levelIndex];
    const currentQuestion = ()=> currentLevel().items[state.qIndex];

    function renderQuestion(){
      const lvl = currentLevel();
      const item = currentQuestion();
      qText.textContent = item.q;
      optionsEl.innerHTML = "";
      explainEl.classList.add('hidden');
      footCat.textContent = item.cat;
      qIndexEl.textContent = (state.qIndex+1);
      qTotalEl.textContent = lvl.items.length;
      scoreEl.textContent = state.score;
      streakEl.textContent = state.streak;
      bestEl.textContent = getBest();
      barEl.style.width = ((answeredCount())/TOTAL_QUESTIONS*100) + "%";
      state.answered = false;
      item.options.forEach((op, idx)=>{
        const b = document.createElement('button');
        b.className = "opt";
        b.textContent = (idx+1)+". "+op;
        b.addEventListener('click', ()=> pick(idx));
        optionsEl.appendChild(b);
      });
    }

    function pick(idx){
      if(state.answered) return;
      state.answered = true;
      const item = currentQuestion();
      const nodes = [...optionsEl.children];
      nodes.forEach((n,i)=>{
        if(i===item.correct) n.classList.add('correct');
        if(i===idx && idx!==item.correct) n.classList.add('wrong');
      });
      const ok = idx === item.correct;
      if(ok){ state.score += 10; state.streak += 1; toast("Correct! +10"); }
      else { state.score -= 5; state.streak = 0; toast("Not quite. -5"); }
      if(state.streak > state.longestStreak) state.longestStreak = state.streak;
      scoreEl.textContent = state.score; streakEl.textContent = state.streak;
      const best = getBest(); if(state.score > best){ setBest(state.score); bestEl.textContent = state.score; }
      explainEl.textContent = "Why: " + item.explain; explainEl.classList.remove('hidden');

      // Save in history
      state.history.push({
        level: currentLevel().title, cat: item.cat, q: item.q, options: item.options.slice(0),
        correct: item.options[item.correct], chosen: item.options[idx], correctIndex: item.correct, chosenIndex: idx, ok,
        time: new Date().toISOString()
      });

      setTimeout(next, 700);
    }

    function next(){
      const lvl = currentLevel();
      if(state.qIndex < lvl.items.length-1){
        state.qIndex += 1; renderQuestion();
      }else{
        if(state.levelIndex < LEVELS.length-1){
          state.levelIndex += 1; state.qIndex = 0; updateActiveLevel(); renderQuestion();
        }else{
          showFinalSummary();
          saveRunToLeaderboard();
          buildLeaderboardUI();
        }
      }
    }

    function answeredCount(){ return state.history.length; }

    // ---------- Summary ----------
    function computePer
